// Template correction API - Exemple type
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/lib/db';
import { z } from 'zod'; // üî• CRITIQUE: Toujours valider avec Zod

// üîê Schema validation Zod
const CreateMessageSchema = z.object({
  message: z.string().min(1).max(1000),
  destinataireId: z.string().optional(),
  chantierId: z.string().optional(),
  typeMessage: z.enum(['DIRECT', 'CHANTIER', 'GROUPE']),
});

export async function POST(request: NextRequest) {
  try {
    // ‚úÖ 1. V√©rification authentification
    const session = await getServerSession();
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Non authentifi√©' }, 
        { status: 401 }
      );
    }

    // ‚úÖ 2. Validation donn√©es avec Zod
    const body = await request.json();
    const validatedData = CreateMessageSchema.parse(body);

    // ‚úÖ 3. Logique m√©tier
    const newMessage = await prisma.message.create({
      data: {
        ...validatedData,
        expediteurId: session.user.id,
        createdAt: new Date(),
      },
      include: {
        expediteur: {
          select: { id: true, nom: true, email: true, avatar: true }
        }
      }
    });

    // ‚úÖ 4. R√©ponse succ√®s
    return NextResponse.json(newMessage, { status: 201 });

  } catch (error) {
    console.error('‚ùå Erreur API /api/messages:', error);
    
    // ‚úÖ 5. Gestion erreurs sp√©cifiques
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Donn√©es invalides', details: error.errors },
        { status: 400 }
      );
    }

    // ‚úÖ 6. Erreur g√©n√©rique
    return NextResponse.json(
      { error: 'Erreur serveur interne' },
      { status: 500 }
    );
  }
}

// ‚úÖ 7. Autres m√©thodes HTTP
export async function GET(request: NextRequest) {
  // Implementation GET...
}
