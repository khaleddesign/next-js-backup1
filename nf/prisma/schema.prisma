generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  nom           String?
  name          String?
  email         String    @unique
  password      String?
  image         String?
  role          Role      @default(CLIENT)
  phone         String?
  company       String?
  address       String?
  
  // CHAMPS CRM BTP AJOUTÉS
  typeClient         TypeClient? @default(PARTICULIER)
  secteurActivite    String?
  effectif           String?
  chiffreAffaires    Float?
  adresse2           String?
  codePostal         String?
  ville              String?
  pays               String? @default("France")
  sourceProspection  String?
  prefEmail          Boolean @default(true)
  prefSMS            Boolean @default(false)
  prefAppel          Boolean @default(true)
  
  // Relations commerciales
  commercial         User? @relation("Commercial", fields: [commercialId], references: [id])
  commercialId       String?
  commerciaux        User[] @relation("Commercial")
  
  // Relations existantes
  accounts      Account[]
  sessions      Session[]
  chantiers     Chantier[] @relation("ChantierClient")
  assignedChantiers Chantier[] @relation("ChantierAssignee")
  messages      Message[]
  comments      Comment[]
  timelineEvents TimelineEvent[]
  devis         Devis[] @relation("DevisClient")
  planningsOrganisateur Planning[] @relation("PlanningOrganisateur")
  planningsParticipant Planning[] @relation("PlanningParticipants")
  notifications Notification[]
  documents     Document[] @relation("DocumentUploader")
  etapesCreated EtapeChantier[]
  
  // NOUVELLES RELATIONS CRM
  interactions       InteractionClient[] @relation("ClientInteractions")
  opportunites       Opportunite[] @relation("ClientOpportunites")
  
  // RELATION PROJETS BTP
  projets           Projet[] @relation("ProjetClient")
  assignationsTaches AssignationTache[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chantier {
  id          String        @id @default(cuid())
  nom         String
  description String
  adresse     String
  client      User          @relation("ChantierClient", fields: [clientId], references: [id])
  clientId    String
  statut      ChantierStatus @default(PLANIFIE)
  progression Int           @default(0)
  dateDebut   DateTime
  dateFin     DateTime
  budget      Float
  superficie  String
  photo       String?
  photos      String?
  lat         Float?
  lng         Float?
  
  assignees   User[]        @relation("ChantierAssignee")
  timeline    TimelineEvent[]
  comments    Comment[]
  messages    Message[]
  devis       Devis[]
  plannings   Planning[] @relation("PlanningChantier")
  documents   Document[] @relation("DocumentChantier")
  etapes      EtapeChantier[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TimelineEvent {
  id          String            @id @default(cuid())
  chantier    Chantier          @relation(fields: [chantierId], references: [id], onDelete: Cascade)
  chantierId  String
  titre       String
  description String
  date        DateTime
  type        TimelineEventType
  createdBy   User              @relation(fields: [createdById], references: [id])
  createdById String
  
  createdAt   DateTime          @default(now())
}

model Comment {
  id         String      @id @default(cuid())
  chantier   Chantier    @relation(fields: [chantierId], references: [id], onDelete: Cascade)
  chantierId String
  auteur     User        @relation(fields: [auteurId], references: [id])
  auteurId   String
  message    String
  photos     String?
  reactions  Json        @default("[]")
  
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Message {
  id             String      @id @default(cuid())
  expediteur     User        @relation(fields: [expediteurId], references: [id])
  expediteurId   String
  destinataireId String?
  chantier       Chantier?   @relation(fields: [chantierId], references: [id])
  chantierId     String?
  message        String
  photos         String?
  typeMessage    MessageType @default(DIRECT)
  lu             Boolean     @default(false)
  reactions      Json        @default("[]")
  threadId       String?
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Devis {
  id              String        @id @default(cuid())
  numero          String        @unique
  chantier        Chantier?     @relation(fields: [chantierId], references: [id])
  chantierId      String?
  client          User          @relation("DevisClient", fields: [clientId], references: [id])
  clientId        String
  type            DevisType
  objet           String?
  montant         Float
  totalHT         Float?
  totalTVA        Float?
  totalTTC        Float?
  tva             Float         @default(20.0)
  statut          DevisStatus   @default(BROUILLON)
  dateCreation    DateTime      @default(now())
  dateEcheance    DateTime
  
  // AJOUTS BTP - SITUATIONS DE TRAVAUX
  situationNumero    Int?
  situationParent    String?
  avancement         Float  @default(0)
  
  // AJOUTS BTP - RETENUE DE GARANTIE
  retenueGarantie    Float?
  cautionBancaire    Boolean @default(false)
  dateLiberation     DateTime?
  
  // AJOUTS BTP - TVA MULTI-TAUX
  tva55              Float?
  tva10              Float?
  tva20              Float?
  
  // AJOUTS BTP - AUTOLIQUIDATION
  autoliquidation    Boolean @default(false)
  mentionAutoliq     String?
  
  // AJOUTS BTP - SIGNATURES & SUIVI
  consulteLe         DateTime?
  signatureLien      String?
  dateSignature      DateTime?
  
  lignes          Json          @default("[]")
  ligneDevis      LigneDevis[]
  ligneDevisDetails LigneDevisDetail[]
  paiements       Paiement[]    @relation("FacturePaiements")
  relances        Relance[]     @relation("FactureRelances")
  notes           String?
  conditionsVente String?
  factureId       String?
  modalitesPaiement String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model LigneDevis {
  id          String  @id @default(cuid())
  devis       Devis   @relation(fields: [devisId], references: [id], onDelete: Cascade)
  devisId     String
  description String
  quantite    Float
  prixUnit    Float
  total       Float
  ordre       Int     @default(0)
  
  // Relation vers détail BTP
  details     LigneDevisDetail[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// NOUVEAU MODÈLE BTP - DÉTAIL PAR LIGNE
model LigneDevisDetail {
  id          String @id @default(cuid())
  ligneDevis  LigneDevis @relation(fields: [ligneId], references: [id], onDelete: Cascade)
  ligneId     String
  devis       Devis @relation(fields: [devisId], references: [id], onDelete: Cascade)
  devisId     String
  tauxTVA     Float @default(20.0)
  categorie   String?
  unite       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Paiement {
  id          String   @id @default(cuid())
  facture     Devis    @relation("FacturePaiements", fields: [factureId], references: [id], onDelete: Cascade)
  factureId   String
  montant     Float
  datePaiement DateTime
  methode     String
  reference   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Relance {
  id          String   @id @default(cuid())
  facture     Devis    @relation("FactureRelances", fields: [factureId], references: [id], onDelete: Cascade)
  factureId   String
  dateRelance DateTime
  type        String   @default("EMAIL")
  message     String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Planning {
  id            String         @id @default(cuid())
  titre         String
  description   String?
  type          PlanningType   @default(REUNION)
  dateDebut     DateTime
  dateFin       DateTime
  recurrence    String?
  
  chantier      Chantier?      @relation("PlanningChantier", fields: [chantierId], references: [id])
  chantierId    String?
  organisateur  User           @relation("PlanningOrganisateur", fields: [organisateurId], references: [id])
  organisateurId String
  participants  User[]         @relation("PlanningParticipants")
  
  statut        PlanningStatus @default(PLANIFIE)
  notes         String?
  lieu          String?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Document {
  id            String       @id @default(cuid())
  nom           String
  nomOriginal   String
  type          TypeDocument
  taille        Int
  url           String
  urlThumbnail  String?
  
  chantier      Chantier?    @relation("DocumentChantier", fields: [chantierId], references: [id])
  chantierId    String?
  uploader      User         @relation("DocumentUploader", fields: [uploaderId], references: [id])
  uploaderId    String
  
  metadonnees   Json?
  tags          String?
  dossier       String?
  public        Boolean      @default(false)
  lienPartage   String?      @unique
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  titre     String
  message   String
  type      NotificationType @default(INFO)
  lu        Boolean          @default(false)
  lien      String?
  
  createdAt DateTime         @default(now())
}

model EtapeChantier {
  id          String      @id @default(cuid())
  titre       String
  description String?
  dateDebut   DateTime
  dateFin     DateTime
  statut      EtapeStatus @default(A_FAIRE)
  ordre       Int         @default(0)
  
  chantier    Chantier    @relation(fields: [chantierId], references: [id], onDelete: Cascade)
  chantierId  String
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById String
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// NOUVEAU MODÈLE BTP - BIBLIOTHÈQUE PRIX
model BibliothequePrix {
  id           String @id @default(cuid())
  code         String @unique
  designation  String
  unite        String
  prixHT       Float
  corpsEtat    String
  region       String @default("France")
  dateMAJ      DateTime @default(now())
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// NOUVEAUX MODÈLES PLANNING GANTT
model Projet {
  id          String @id @default(cuid())
  nom         String
  description String?
  statut      StatutProjet @default(PLANIFICATION)
  dateDebut   DateTime?
  dateFin     DateTime?
  budget      Float?
  
  client      User @relation("ProjetClient", fields: [clientId], references: [id])
  clientId    String
  
  taches      TacheProjet[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TacheProjet {
  id          String @id @default(cuid())
  nom         String
  description String?
  dateDebut   DateTime
  dateFin     DateTime
  dureeJours  Int
  statut      StatutTache @default(EN_ATTENTE)
  priorite    PrioriteTache @default(MOYENNE)
  avancement  Int @default(0)
  corpsEtat   String
  dependances Json?
  
  projet      Projet @relation(fields: [projetId], references: [id], onDelete: Cascade)
  projetId    String
  
  assignations AssignationTache[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AssignationTache {
  id        String @id @default(cuid())
  tache     TacheProjet @relation(fields: [tacheId], references: [id], onDelete: Cascade)
  tacheId   String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  
  createdAt DateTime @default(now())
  
  @@unique([tacheId, userId])
}

// EXTENSION CRM - INTERACTIONS CLIENT
model InteractionClient {
  id           String @id @default(cuid())
  client       User @relation("ClientInteractions", fields: [clientId], references: [id], onDelete: Cascade)
  clientId     String
  type         TypeInteraction
  objet        String
  description  String
  dateContact  DateTime @default(now())
  prochaineSuite DateTime?
  createdBy    String
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// EXTENSION CRM - OPPORTUNITÉS
model Opportunite {
  id           String @id @default(cuid())
  client       User @relation("ClientOpportunites", fields: [clientId], references: [id], onDelete: Cascade)
  clientId     String
  nom          String
  description  String
  valeurEstimee Float
  probabilite  Int @default(50)
  statut       StatutOpportunite @default(PROSPECT)
  dateCloture  DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ENUMS
enum Role {
  ADMIN
  COMMERCIAL
  OUVRIER
  CLIENT
}

enum ChantierStatus {
  PLANIFIE
  EN_COURS
  EN_ATTENTE
  TERMINE
  ANNULE
}

enum TimelineEventType {
  DEBUT
  ETAPE
  PROBLEME
  FIN
  ATTENTE
}

enum MessageType {
  DIRECT
  CHANTIER
  GROUPE
}

enum DevisType {
  DEVIS
  FACTURE
}

enum DevisStatus {
  BROUILLON
  ENVOYE
  ACCEPTE
  REFUSE
  PAYE
  ANNULE
}

enum PlanningType {
  REUNION
  LIVRAISON
  INSPECTION
  AUTRE
}

enum PlanningStatus {
  PLANIFIE
  EN_COURS
  TERMINE
  ANNULE
}

enum TypeDocument {
  PHOTO
  PDF
  PLAN
  FACTURE
  CONTRAT
  AUTRE
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum EtapeStatus {
  A_FAIRE
  EN_COURS
  TERMINE
}

// NOUVEAUX ENUMS BTP
enum TypeClient {
  PARTICULIER
  PROFESSIONNEL
  SYNDIC
  PROMOTEUR
}

enum TypeInteraction {
  APPEL
  EMAIL
  VISITE
  REUNION
  AUTRE
}

enum StatutOpportunite {
  PROSPECT
  QUALIFIE
  PROPOSITION
  NEGOCIATION
  GAGNE
  PERDU
}

enum StatutProjet {
  PLANIFICATION
  EN_COURS
  TERMINE
  ANNULE
}

enum StatutTache {
  EN_ATTENTE
  EN_COURS
  TERMINE
  SUSPENDU
}

enum PrioriteTache {
  BASSE
  MOYENNE
  HAUTE
  CRITIQUE
}
